/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file vehicle_status.msg */


#include <cinttypes>
#include <cstdio>
#include <px4_defines.h>
#include <uORB/topics/vehicle_status.h>
#include <drivers/drv_hrt.h>

constexpr char __orb_vehicle_status_fields[] = "uint64_t timestamp;uint32_t onboard_control_sensors_present;uint32_t onboard_control_sensors_enabled;uint32_t onboard_control_sensors_health;uint8_t nav_state;uint8_t arming_state;uint8_t hil_state;bool failsafe;uint8_t system_type;uint8_t system_id;uint8_t component_id;bool is_rotary_wing;bool is_vtol;bool vtol_fw_permanent_stab;bool in_transition_mode;bool in_transition_to_fw;bool rc_signal_lost;uint8_t rc_input_mode;bool data_link_lost;bool high_latency_data_link_active;uint8_t data_link_lost_counter;bool engine_failure;bool mission_failure;uint8_t[1] _padding0;";

ORB_DEFINE(vehicle_status, struct vehicle_status_s, 39, __orb_vehicle_status_fields);


void print_message(const vehicle_status_s& message)
{
	printf(" vehicle_status_s\n");
	printf("\ttimestamp: %" PRIu64, message.timestamp);
	if (message.timestamp != 0) {
		printf(" (%.6f seconds ago)\n", hrt_elapsed_time(&message.timestamp) / 1e6);
	} else {
		printf("\n");
	}
	printf("\tonboard_control_sensors_present: %" PRIu32 "\n", message.onboard_control_sensors_present);
	printf("\tonboard_control_sensors_enabled: %" PRIu32 "\n", message.onboard_control_sensors_enabled);
	printf("\tonboard_control_sensors_health: %" PRIu32 "\n", message.onboard_control_sensors_health);
	printf("\tnav_state: %u\n", message.nav_state);
	printf("\tarming_state: %u\n", message.arming_state);
	printf("\thil_state: %u\n", message.hil_state);
	printf("\tfailsafe: %u\n", message.failsafe);
	printf("\tsystem_type: %u\n", message.system_type);
	printf("\tsystem_id: %u\n", message.system_id);
	printf("\tcomponent_id: %u\n", message.component_id);
	printf("\tis_rotary_wing: %u\n", message.is_rotary_wing);
	printf("\tis_vtol: %u\n", message.is_vtol);
	printf("\tvtol_fw_permanent_stab: %u\n", message.vtol_fw_permanent_stab);
	printf("\tin_transition_mode: %u\n", message.in_transition_mode);
	printf("\tin_transition_to_fw: %u\n", message.in_transition_to_fw);
	printf("\trc_signal_lost: %u\n", message.rc_signal_lost);
	printf("\trc_input_mode: %u\n", message.rc_input_mode);
	printf("\tdata_link_lost: %u\n", message.data_link_lost);
	printf("\thigh_latency_data_link_active: %u\n", message.high_latency_data_link_active);
	printf("\tdata_link_lost_counter: %u\n", message.data_link_lost_counter);
	printf("\tengine_failure: %u\n", message.engine_failure);
	printf("\tmission_failure: %u\n", message.mission_failure);
	}