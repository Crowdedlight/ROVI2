/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file vehicle_local_position.msg */


#include <cinttypes>
#include <cstdio>
#include <px4_defines.h>
#include <uORB/topics/vehicle_local_position.h>
#include <drivers/drv_hrt.h>

constexpr char __orb_vehicle_local_position_fields[] = "uint64_t timestamp;uint64_t ref_timestamp;double ref_lat;double ref_lon;float x;float y;float z;float[2] delta_xy;float delta_z;float vx;float vy;float vz;float z_deriv;float[2] delta_vxy;float delta_vz;float ax;float ay;float az;float yaw;float ref_alt;float dist_bottom;float dist_bottom_rate;float eph;float epv;float evh;float evv;float vxy_max;bool xy_valid;bool z_valid;bool v_xy_valid;bool v_z_valid;uint8_t xy_reset_counter;uint8_t z_reset_counter;uint8_t vxy_reset_counter;uint8_t vz_reset_counter;bool xy_global;bool z_global;bool dist_bottom_valid;bool limit_hagl;";

ORB_DEFINE(vehicle_local_position, struct vehicle_local_position_s, 144, __orb_vehicle_local_position_fields);
ORB_DEFINE(vehicle_local_position_groundtruth, struct vehicle_local_position_s, 144, __orb_vehicle_local_position_fields);
ORB_DEFINE(vehicle_vision_position, struct vehicle_local_position_s, 144, __orb_vehicle_local_position_fields);


void print_message(const vehicle_local_position_s& message)
{
	printf(" vehicle_local_position_s\n");
	printf("\ttimestamp: %" PRIu64, message.timestamp);
	if (message.timestamp != 0) {
		printf(" (%.6f seconds ago)\n", hrt_elapsed_time(&message.timestamp) / 1e6);
	} else {
		printf("\n");
	}
	printf("\tref_timestamp: %" PRIu64 "\n", message.ref_timestamp);
	printf("\tref_lat: %.3f\n", message.ref_lat);
	printf("\tref_lon: %.3f\n", message.ref_lon);
	printf("\tx: %.3f\n", (double)message.x);
	printf("\ty: %.3f\n", (double)message.y);
	printf("\tz: %.3f\n", (double)message.z);
	printf("\tdelta_xy: [%.3f, %.3f]\n", (double)message.delta_xy[0], (double)message.delta_xy[1]);
	printf("\tdelta_z: %.3f\n", (double)message.delta_z);
	printf("\tvx: %.3f\n", (double)message.vx);
	printf("\tvy: %.3f\n", (double)message.vy);
	printf("\tvz: %.3f\n", (double)message.vz);
	printf("\tz_deriv: %.3f\n", (double)message.z_deriv);
	printf("\tdelta_vxy: [%.3f, %.3f]\n", (double)message.delta_vxy[0], (double)message.delta_vxy[1]);
	printf("\tdelta_vz: %.3f\n", (double)message.delta_vz);
	printf("\tax: %.3f\n", (double)message.ax);
	printf("\tay: %.3f\n", (double)message.ay);
	printf("\taz: %.3f\n", (double)message.az);
	printf("\tyaw: %.3f\n", (double)message.yaw);
	printf("\tref_alt: %.3f\n", (double)message.ref_alt);
	printf("\tdist_bottom: %.3f\n", (double)message.dist_bottom);
	printf("\tdist_bottom_rate: %.3f\n", (double)message.dist_bottom_rate);
	printf("\teph: %.3f\n", (double)message.eph);
	printf("\tepv: %.3f\n", (double)message.epv);
	printf("\tevh: %.3f\n", (double)message.evh);
	printf("\tevv: %.3f\n", (double)message.evv);
	printf("\tvxy_max: %.3f\n", (double)message.vxy_max);
	printf("\txy_valid: %u\n", message.xy_valid);
	printf("\tz_valid: %u\n", message.z_valid);
	printf("\tv_xy_valid: %u\n", message.v_xy_valid);
	printf("\tv_z_valid: %u\n", message.v_z_valid);
	printf("\txy_reset_counter: %u\n", message.xy_reset_counter);
	printf("\tz_reset_counter: %u\n", message.z_reset_counter);
	printf("\tvxy_reset_counter: %u\n", message.vxy_reset_counter);
	printf("\tvz_reset_counter: %u\n", message.vz_reset_counter);
	printf("\txy_global: %u\n", message.xy_global);
	printf("\tz_global: %u\n", message.z_global);
	printf("\tdist_bottom_valid: %u\n", message.dist_bottom_valid);
	printf("\tlimit_hagl: %u\n", message.limit_hagl);
}