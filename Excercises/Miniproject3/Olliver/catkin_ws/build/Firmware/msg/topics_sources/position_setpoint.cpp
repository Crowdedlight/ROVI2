/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file position_setpoint.msg */


#include <cinttypes>
#include <cstdio>
#include <px4_defines.h>
#include <uORB/topics/position_setpoint.h>
#include <drivers/drv_hrt.h>

constexpr char __orb_position_setpoint_fields[] = "uint64_t timestamp;double lat;double lon;float x;float y;float z;float vx;float vy;float vz;float alt;float yaw;float yawspeed;float loiter_radius;float pitch_min;float a_x;float a_y;float a_z;float acceptance_radius;float cruising_speed;float cruising_throttle;bool valid;uint8_t type;bool position_valid;bool velocity_valid;uint8_t velocity_frame;bool alt_valid;bool yaw_valid;bool yawspeed_valid;int8_t loiter_direction;bool acceleration_valid;bool acceleration_is_force;uint8_t[1] _padding0;";

ORB_DEFINE(position_setpoint, struct position_setpoint_s, 103, __orb_position_setpoint_fields);


void print_message(const position_setpoint_s& message)
{
	printf(" position_setpoint_s\n");
	printf("\ttimestamp: %" PRIu64, message.timestamp);
	if (message.timestamp != 0) {
		printf(" (%.6f seconds ago)\n", hrt_elapsed_time(&message.timestamp) / 1e6);
	} else {
		printf("\n");
	}
	printf("\tlat: %.3f\n", message.lat);
	printf("\tlon: %.3f\n", message.lon);
	printf("\tx: %.3f\n", (double)message.x);
	printf("\ty: %.3f\n", (double)message.y);
	printf("\tz: %.3f\n", (double)message.z);
	printf("\tvx: %.3f\n", (double)message.vx);
	printf("\tvy: %.3f\n", (double)message.vy);
	printf("\tvz: %.3f\n", (double)message.vz);
	printf("\talt: %.3f\n", (double)message.alt);
	printf("\tyaw: %.3f\n", (double)message.yaw);
	printf("\tyawspeed: %.3f\n", (double)message.yawspeed);
	printf("\tloiter_radius: %.3f\n", (double)message.loiter_radius);
	printf("\tpitch_min: %.3f\n", (double)message.pitch_min);
	printf("\ta_x: %.3f\n", (double)message.a_x);
	printf("\ta_y: %.3f\n", (double)message.a_y);
	printf("\ta_z: %.3f\n", (double)message.a_z);
	printf("\tacceptance_radius: %.3f\n", (double)message.acceptance_radius);
	printf("\tcruising_speed: %.3f\n", (double)message.cruising_speed);
	printf("\tcruising_throttle: %.3f\n", (double)message.cruising_throttle);
	printf("\tvalid: %u\n", message.valid);
	printf("\ttype: %u\n", message.type);
	printf("\tposition_valid: %u\n", message.position_valid);
	printf("\tvelocity_valid: %u\n", message.velocity_valid);
	printf("\tvelocity_frame: %u\n", message.velocity_frame);
	printf("\talt_valid: %u\n", message.alt_valid);
	printf("\tyaw_valid: %u\n", message.yaw_valid);
	printf("\tyawspeed_valid: %u\n", message.yawspeed_valid);
	printf("\tloiter_direction: %d\n", message.loiter_direction);
	printf("\tacceleration_valid: %u\n", message.acceleration_valid);
	printf("\tacceleration_is_force: %u\n", message.acceleration_is_force);
	}